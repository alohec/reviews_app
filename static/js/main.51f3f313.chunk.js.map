{"version":3,"sources":["components/MapLayers.js","components/SearchBar.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["MapLayers","options","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","SearchBar","useState","restaurants","setRestaurants","fuse","setFuse","suggestions","setSuggestions","useEffect","fetch","then","response","json","data","Fuse","class","type","id","placeholder","autoComplete","list","onChange","text","document","getElementById","value","results","search","map","s","style","display","onClick","e","preventDefault","console","log","Sidebar","App","mapboxToken","setToken","Map","ReactMapboxGl","accessToken","containerStyle","height","width","center","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAMeA,EAJG,WAChB,OAAO,M,gBCCHC,G,MAAU,CACdC,YAAY,EACZC,UAAW,GACXC,SAAU,EACVC,SAAU,IACVC,iBAAkB,GAClBC,mBAAoB,IAgDPC,EA7CG,WAAO,IAAD,EACgBC,qBADhB,mBACfC,EADe,KACFC,EADE,OAEEF,qBAFF,mBAEfG,EAFe,KAETC,EAFS,OAGgBJ,qBAHhB,mBAGfK,EAHe,KAGFC,EAHE,KAKtBC,oBAAU,WACRC,MAAM,gBAAgBC,KAAK,SAAAC,GAAQ,OACjCA,EAASC,OAAOF,KAAK,SAAAG,GACnBV,EAAeU,GACfR,EAAQ,IAAIS,IAAKD,EAAMpB,SAG1B,IAaH,OACE,yBAAKsB,MAAM,aACT,8BACE,2BACEC,KAAK,OACLC,GAAG,YACHC,YAAY,qBACZC,aAAa,MACbC,KAAK,cACLC,SAfO,WACb,IAAMC,EAAOC,SAASC,eAAe,aAAaC,MAC5CC,EAAWtB,EAAKuB,OAAOL,GAC7Bf,EAAe,CAACL,EAAYwB,EAAQ,IAAKxB,EAAYwB,EAAQ,IAAKxB,EAAYwB,EAAQ,SAclF,8BAAUT,GAAG,eACVX,GAAeA,EAAYsB,IAAI,SAAAC,GAAC,OAAI,4BAAQJ,MAAOI,OAEtD,2BAAOb,KAAK,SAASc,MAAO,CAACC,QAAS,QAASC,QAzBpC,SAACC,GAChBA,EAAEC,iBACFC,QAAQC,IAAI,mBCpBDC,EANC,WACd,OACE,kBAAC,EAAD,OCqCWC,G,MApCH,WAAO,IAAD,EACgBrC,mBAAS,aADzB,mBACTsC,EADS,KACIC,EADJ,KAGhBhC,oBAAU,WACRC,MAAM,WAAWC,KAAK,SAAAC,GAAQ,OAC5BA,EAASC,OAAOF,KAAK,SAAAG,GACnB2B,EAAS3B,QAGZ,IAEH,IAAM4B,EAAMC,YAAc,CACxBC,YAAaJ,IAGf,OACE,6BACE,yBAAKxB,MAAM,WACT,kBAAC,EAAD,OAEF,yBAAKA,MAAM,OACT,kBAAC0B,EAAD,CACEX,MAAM,oCACNc,eAAgB,CACdC,OAAQ,QACRC,MAAO,SAETC,OAAQ,EAAE,WAAW,YAErB,kBAAC,EAAD,WCvBUC,QACW,cAA7BC,OAAOrD,SAASsD,UAEe,UAA7BD,OAAOrD,SAASsD,UAEhBD,OAAOrD,SAASsD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAASC,eAAe,SD2H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC,iB","file":"static/js/main.51f3f313.chunk.js","sourcesContent":["import React from 'react';\n\nconst MapLayers = () => {\n  return null;\n}\n\nexport default MapLayers;\n","import React, { useEffect, useState } from 'react';\nimport Fuse from 'fuse.js';\nimport './SearchBar.css';\n\nconst options = {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n};\n\nconst SearchBar = () => {\n  const [restaurants, setRestaurants] = useState();\n  const [fuse, setFuse] = useState();\n  const [suggestions, setSuggestions] = useState();\n\n  useEffect(() => {\n    fetch('/restaurants').then(response =>\n      response.json().then(data => {\n        setRestaurants(data);\n        setFuse(new Fuse(data, options));\n      })\n    )\n  }, []);\n\n  const onSearch = (e) => {\n    e.preventDefault();\n    console.log('Searched!');\n  }\n\n  const onType = () => {\n    const text = document.getElementById(\"searchBar\").value;\n    const results =  fuse.search(text);\n    setSuggestions([restaurants[results[0]], restaurants[results[1]], restaurants[results[2]]]);\n  }\n\n  return (\n    <div class=\"searchBar\">\n      <form>\n        <input\n          type=\"text\"\n          id=\"searchBar\"\n          placeholder=\"Search for things!\"\n          autoComplete=\"off\"\n          list=\"suggestions\"\n          onChange={onType}\n        />\n        <datalist id=\"suggestions\">\n          {suggestions && suggestions.map(s => <option value={s}/>)}\n        </datalist>\n        <input type=\"submit\" style={{display: \"none\"}} onClick={onSearch}/>\n      </form>\n    </div>\n  )\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport SearchBar from './SearchBar';\n\nconst Sidebar = () => {\n  return (\n    <SearchBar/>\n  )\n}\n\nexport default Sidebar;\n","import React, { useEffect, useState } from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport MapLayers from './components/MapLayers';\nimport Sidebar from './components/Sidebar';\nimport './App.css';\n\nconst App = () => {\n  const [mapboxToken, setToken] = useState(\"undefined\");\n\n  useEffect(() => {\n    fetch('/mapbox').then(response =>\n      response.json().then(data => {\n        setToken(data);\n      })\n    )\n  }, []);\n\n  const Map = ReactMapboxGl({\n    accessToken: mapboxToken,\n  });\n\n  return (\n    <div>\n      <div class=\"sidebar\">\n        <Sidebar/>\n      </div>\n      <div class=\"map\">\n        <Map\n          style=\"mapbox://styles/mapbox/streets-v9\" // eslint-disable-line\n          containerStyle={{\n            height: '100vh',\n            width: '100vw',\n          }}\n          center={[-122.431297,37.773972]}\n        >\n          <MapLayers/>\n        </Map>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}